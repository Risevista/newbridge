---
// Astro Frontmatter
import Image from '../components/Image.astro';
import Layout from '../layouts/Layout.astro';
import { getCollection } from "astro:content";
import Values from '../components/Values.astro';
import FAQ from '../components/FAQ.astro';
import Twocategories from '../components/Twocategories.astro';
import Testimonials from '../components/Testimonials.astro';
import SectionTitle from '../components/SectionTitle.astro';
import Hero from '../components/Hero.astro';
import MsIns from '../assets/img/ms-ins.webp';
import Orix from '../assets/img/orix.webp';
import Manulife from '../assets/img/manulife.webp';
import Metlife from '../assets/img/metlife.webp';
import Fwd from '../assets/img/fwd.webp';
import Msa from '../assets/img/mitsuisumitomo_kaijyo_aioi.webp';
import MsPrimary from '../assets/img/mitsuisumitomo_kaijyo_primary.webp';
import Himawari from '../assets/img/himawari.webp';
import Sony from '../assets/img/sony.webp';
import Neofirst from '../assets/img/neofirst.webp';
import HeaderLogo from '../assets/img/bridge.png';

// Text (一箇所に集約) - currently unused
// const COPY = {
//   eyebrowJa: "企業情報",
//   eyebrowEn: "Our Company",
//   head1: "圧倒的な「安心」をあなたに",
//   head2: "個人・法人の総合保険代理店",
//   body1: "保険に関する疑問・課題を解決し、お客様に安心をお届けします。",
//   body2: "企業・個人のお客さまへあらゆる保険ソリューションをご提供します。",
// };

const images = [
  MsIns,
  Orix,
  Manulife,
  Metlife,
  Fwd,
  Msa,
  MsPrimary,
  Himawari,
  Sony,
  Neofirst
];

// ニュース記事の取得とサマリー生成
// const posts = await getCollection("news");
// @ts-ignore
// const withExcerpt = posts
//   .filter((post: any) => !post.data.draft) // 下書きを除外
//   .sort((a: any, b: any) => b.data.date.getTime() - a.data.date.getTime()) // 日付で降順ソート
//   .slice(0, 6) // 最新6件のみ表示
//   .map((post: any) => {
//     // Markdownの生テキストからサマリーを生成
//     const bodyText = post.body
//       .replace(/^#+\s*/gm, '') // 見出し記号を削除
//       .replace(/\*\*(.*?)\*\*/g, '$1') // 太字記号を削除
//       .replace(/\*(.*?)\*/g, '$1') // 斜体記号を削除
//       .replace(/`(.*?)`/g, '$1') // インラインコード記号を削除
//       .replace(/\[([^\]]+)\]\([^)]+\)/g, '$1') // リンク記号を削除
//       .replace(/^\s*[-*+]\s*/gm, '') // リスト記号を削除
//       .replace(/\n+/g, ' ') // 改行を空白に変換
//       .replace(/\s+/g, ' ') // 連続する空白を1つに
//       .trim();
    
//     const excerpt = bodyText.slice(0, 100);
//     return { ...post, excerpt };
//   });


---

<Layout title="圧倒的な安心をあなたに｜保険代理店ならBridge">
  <!-- Preloader overlay -->
  <div id="preloader" class="fixed inset-0 z-[1000] flex items-center justify-center bg-primary-back">
    <div class="h-10 w-10 rounded-full border-2 border-teal-600 border-t-transparent animate-spin"></div>
  </div>
  <div id="page-root" class="opacity-0 transition-opacity duration-500">

    <!-- 重要な画像のプリロード -->
    <link rel="preload" as="image" href={HeaderLogo.src} />

    <!-- =================== HERO =================== -->
    <section class="hero" id="hero">
     <Hero />
  </section>
    <!-- Scroll Indicator -->
    <div class="absolute bottom-8 left-1/2 transform -translate-x-1/2 text-center scroll-indicator z-10" id="scroll-indicator" style="opacity: 0;">
      <div class="flex flex-col items-center space-y-2">
        <span class="text-slate-500 text-sm font-medium tracking-wider">SCROLL</span>
        <div class="w-0.5 h-12 bg-slate-300 relative overflow-hidden">
          <div class="w-0.5 h-4 bg-blue-500 absolute top-0 animate-scroll-line"></div>
        </div>
        <svg class="w-4 h-4 text-slate-400 animate-bounce" fill="currentColor" viewBox="0 0 24 24">
          <path d="M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z"/>
        </svg>
      </div>
    </div>
  </section>  
   
   <Twocategories />
   
   <Testimonials />

   <!-- insurance company Section -->
  <section class="py-24 bg-primary-back relative" id="insurance">
    <div class="max-w-6xl mx-auto px-4 md:px-0">
      <SectionTitle title="INSURANCE COMPANY" subtitle="取り扱い保険会社" />
      <div class="max-w-6xl mx-auto px-4 md:px-0">
        お客様のニーズに沿った最適な品揃えをご提案いたします。
      </div>
    </div>
    <div class="slider-container">
      <div class="slider-track">
        {images.map((img) => (
          <div class="logo-slide">
            <img src={img.src} alt="Company logo" />
          </div>
        ))}
        <!-- 無限ループのために画像を複製 -->
        {images.map((img) => (
          <div class="logo-slide">
            <img src={img.src} alt="Company logo" />
          </div>
        ))}
      </div>
    </div>
    <a href="/providers">
    <div class="max-w-6xl mx-auto px-4 md:px-0 flex justify-end text-secondary-screen underline">
      全ての保険会社を見る
    </div>
    </a>
  </section>

    <!-- VALUES セクション（上下の線を共通、4行は等間隔） -->
    <Values />
  
  <section class="py-16 md:py-24 bg-primary-back relative" id="company">
    <div class="section-heading">COMPANY</div>
    <div class="max-w-6xl mx-auto px-4 md:px-0">
      <SectionTitle title="COMPANY" subtitle="会社概要" />
  
      <!-- 本文2カラム -->
      <div class="flex flex-col md:flex-row gap-8 items-stretch">
        <!-- 左：ロゴ -->
        <div class="md:w-1/3 w-full flex justify-center items-center">
            <Image 
            src={HeaderLogo} 
            alt="Bridge ロゴ" 
            class="object-contain w-auto max-h-[300px]" 
          />
        </div>
  
        <!-- 右：リスト -->
        <div class="md:w-2/3 w-full">
          <dl class="divide-y divide-primary text-primary">
            <div class="flex flex-col md:flex-row py-3">
              <dt class="md:w-[35%] w-full">会社名</dt>
              <dd class="md:w-[65%] w-full ml-3">株式会社Bridge</dd>
            </div>
            <div class="flex flex-col md:flex-row py-3">
              <dt class="md:w-[35%] w-full">CEO</dt>
              <dd class="md:w-[65%] w-full ml-3">土屋 健二</dd>
            </div>
            <div class="flex flex-col md:flex-row py-3">
              <dt class="md:w-[35%] w-full">代表取締役</dt>
              <dd class="md:w-[65%] w-full ml-3">稲葉 あゆみ</dd>
            </div>
            <div class="flex flex-col md:flex-row py-3">
              <dt class="md:w-[35%] w-full">所在地</dt>
              <dd class="md:w-[65%] w-full ml-3">東京都港区三田3-4-17 藤和三田コープⅡ203</dd>
            </div>
            <div class="flex flex-col md:flex-row py-3">
              <dt class="md:w-[35%] w-full">電話番号</dt>
              <dd class="md:w-[65%] w-full ml-3"><a href="tel:0364354592" class="underline">03-6435-4592</a></dd>
            </div>
            <div class="flex flex-col md:flex-row py-3">
              <dt class="md:w-[35%] w-full">事業内容</dt>
              <dd class="md:w-[65%] w-full ml-3">保険代理店</dd>
            </div>
          </dl>
        </div>
      </div>
    </div>
  </section>  

  <!-- Properties Carousel Section -->
  <!-- <section class="py-24 bg-primary-back" id="properties">
    <PropertyCarousel />
  </section> -->

  <!-- よくある質問 セクション -->
  <FAQ />
</div>
  </div>
</Layout>

<!-- ========================= CSS ========================= -->
<style>

  :root{
    --draw: 1.2s;   /* 1文字を描く時間 */
    --step: .12s;   /* 文字間ディレイ */
    --ink: #C79D4F; /* stroke の色（金色） */
    --fill: #001722; /* fill の色（primary） */
  }
  @media (max-width: 768px){
    :root{
      --draw: 1.2s;   /* スマホでもゆっくりと */
      --step: .15s;   /* 文字間ディレイも長く */
    }
  }
  @media (prefers-reduced-motion: reduce){
    .textcont tspan{ animation: none !important; fill: var(--fill); stroke: transparent; stroke-opacity: 0; stroke-width: 0; }
  }

  .hero-svg-headline{
    position: absolute; inset: 0;
    display: flex; flex-direction: column;
    align-items: center; justify-content: center;
    gap: 4px; z-index: 10;
  }
  @media (max-width: 768px){
    .hero-svg-headline{
      justify-content: flex-start;
      padding-top: 36px;
    }

  }
  .textcont{ width: min(92vw, 900px); height: auto; display: block; }
  .font-min{
    font-family: "fot-tsukumin-pr6n", sans-serif;
    font-weight: 500; font-size: 80px; letter-spacing: .08em;
  }
  @media (max-width: 768px){
    .textcont{ 
      width: 100vw; 
      padding: 0 2vw;
      box-sizing: border-box;
    }
  }
  .textcont tspan{
    fill: transparent; stroke: var(--ink); stroke-width: 1.5px;
    --len: 900; --i: 0;
    stroke-dasharray: var(--len); stroke-dashoffset: var(--len);
    animation: draw var(--draw) ease forwards, fillIn 0s linear forwards;
    animation-delay: calc(var(--i) * var(--step)), calc(var(--i) * var(--step) + var(--draw));
  }
  @keyframes draw{ to{ stroke-dashoffset: 0; } }
  @keyframes fillIn{ to{ fill: var(--fill); stroke: transparent; stroke-opacity: 0; stroke-width: 0; } }
  @media (max-width: 768px){
    .font-min{ font-size: clamp(50px, 12vw, 100px); }
    .textcont tspan{ stroke-width: 1.5px; }
  }
  .mcap img{ width: 260px; height: auto; display: block; }

  /* Slide in right animation */
.letter-effect .slide-in-right {
  left: 60px;
  opacity: 0;
  transform: skewX(5deg);
  transition: opacity 1s ease-out, transform 1.5s, left 1.5s;
}

.letter-effect.open .slide-in-right {
  left: 0;
  opacity: 1;
  transform: skewX(0);
}

/* Slide in left animation */
.slide-in-left {
  left: -60px;
  opacity: 0;
  transform: skewX(-5deg);
  transition: opacity 1s ease-out, transform 1.5s, left 1.5s;
  transition-delay: var(--delay, 0s);
  position: relative;
}

.slide-in-left.visible {
  left: 0;
  opacity: 1;
  transform: skewX(0);
}

/* Fade in text animation */
.fade-in-text {
  opacity: 0;
  transform: translateY(20px);
  transition: opacity 0.8s ease-out, transform 0.8s ease-out;
  transition-delay: var(--delay, 0s);
  display: inline-block;
}

.fade-in-text.visible {
  opacity: 1;
  transform: translateY(0);
}

/* Per-character fade-in */
.fade-char {
  opacity: 0;
  display: inline-block;
  transform: translateY(8px);
  transition: opacity 0.4s ease, transform 0.4s ease;
}
.fade-char.in {
  opacity: 1;
  transform: translateY(0);
}

.ellipse-image-container {
  position: relative;
  width: 100%;
  height: 100%;
  overflow: hidden;
}

.ellipse-wrapper {
  position: absolute;
  width: 70%;
  height: 60%;
  top: 50%;
  left: 60%;
  transform: translate(-50%, -50%) rotate(-12deg);
  border-radius: 50%;
  overflow: hidden;
  opacity: 0.9;
}

.ellipse-background-image {
  position: absolute;
  top: 0;
  left: 0;
  width: 120%;
  height: 120%;
  object-fit: cover;
  transform: rotate(12deg) scale(1.1);
  transform-origin: center;
  opacity: 0;
  will-change: opacity; /* パフォーマンス安定 */
}

/* ▼ 各スライド：24sを4分割して担当（0–6s / 6–12s / 12–18s / 18–24s） */
.ellipse-background-image.slide-0 {
  animation: smoothSlideShow 24s linear infinite both;
  animation-delay: 0s;      /* 0–6s 担当 */
}
.ellipse-background-image.slide-1 {
  animation: smoothSlideShow 24s linear infinite both;
  animation-delay: -6s;     /* 6–12s 担当 */
}
.ellipse-background-image.slide-2 {
  animation: smoothSlideShow 24s linear infinite both;
  animation-delay: -12s;    /* 12–18s 担当 */
}
.ellipse-background-image.slide-3 {
  animation: smoothSlideShow 24s linear infinite both;
  animation-delay: -18s;    /* 18–24s 担当 */
}

/* レスポンシブ調整 */
@media (max-width: 768px) {
  .ellipse-wrapper {
    width: 95%;
    height: 35%;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) rotate(-15deg);
  }
  .ellipse-background-image {
    top: 50%;
    left: 50%;
    width: 140%;
    height: 140%;
    transform: translate(-50%, -50%) rotate(15deg) scale(1.2);
  }
}

@media (max-width: 480px) {
  .ellipse-wrapper {
    width: 98%;
    height: 30%;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) rotate(-10deg);
  }
  .ellipse-background-image {
    top: 50%;
    left: 50%;
    width: 130%;
    height: 130%;
    transform: translate(-50%, -50%) rotate(10deg) scale(1.15);
  }
}

/* ▼ 空白が出ないクロスフェード（1枚＝24sの25%担当） */
@keyframes smoothSlideShow {
  0%    { opacity: 0; }
  2%    { opacity: 1; }  /* 先行IN開始（24sの2% = 約0.48s） */
  22%   { opacity: 1; }  /* 担当枠内の可視維持 */
  28%   { opacity: 0; }  /* 遅延OUT終了（24sの3% = 約0.72s） */
  100%  { opacity: 0; }
}
/* お好みで：視覚効果を減らしたい人への配慮 */
@media (prefers-reduced-motion: reduce) {
  .ellipse-background-image { animation: none !important; opacity: 1; }
}


.writing-vertical {
  writing-mode: vertical-rl;
  text-orientation: mixed;
}

.section-heading { position: absolute; bottom: 2rem; right: 2rem; font-size: 8rem; font-weight: bold; color: #101ad0; opacity: 0; transition: opacity 0.8s ease-out; pointer-events: none; z-index: 1; letter-spacing: 0.2em; }
  .section-heading.visible { opacity: 0.1; }

  @media (max-width: 767px) {
    .section-heading {
      bottom: 2rem;
      right: 1rem;
      font-size: 2.25rem;
    }
    
    /* スマホでのスクロール時のオフセット調整 */
    #message, #consultants {
      scroll-margin-top: 80px;
    }
  }

/* Service section border line animation - center to sides */
.service-border-line {
  width: 0;
  height: 1px;
  background: #1d453c;
  margin: 0 auto;
  transition: width 1s ease-out;
  transition-delay: var(--delay, 0s);
}

.service-border-line.visible {
  width: 100%;
}

/* Company section menu styles */
.menu-item {
  border-left: 3px solid transparent;
}

.menu-item:hover {
  border-left-color: #0d9488; /* teal-600 */
}

/* Line clamp utilities for news content */
.line-clamp-2 {
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* New Hero Section Styles */
  /* Responsive improvements and additional styling */
  @media (max-width: 768px) {
    .hero-section .grid {
      grid-template-columns: 1fr;
      gap: 2rem;
      text-align: center;
    }

    .hero-section h1 {
      font-size: 2.5rem;
      line-height: 1.1;
    }

    .hero-section p {
      font-size: 1.25rem;
    }

    .hero-section button {
      padding: 0.75rem 2rem;
      font-size: 0.9rem;
    }

    .hero-image {
      order: -1;
    }

    .hero-image .max-w-lg {
      max-width: 20rem;
    }

    #about .grid {
      gap: 2rem;
    }

    #company h2 {
      font-size: 3rem;
    }
  }

  @media (max-width: 480px) {
    .hero-section h1 {
      font-size: 2rem;
    }

    .hero-section .space-y-6 {
      padding: 1rem;
    }

    #company dl > div {
      padding: 1rem 0;
    }
  }

  /* Custom hover effects */
  .hero-section button:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 25px rgba(59, 130, 246, 0.3);
  }

  /* Smooth scrolling - ブラウザネイティブを使用 */
  html {
    scroll-behavior: smooth;
  }

  /* Custom gradient text */
  .gradient-text {
    background: linear-gradient(135deg, #1e40af, #475569);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  /* Simple slide functionality */
  .slideshow-container {
    position: relative;
  }

  .slide {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    transition: opacity 0.8s ease-in-out, transform 0.8s ease-in-out;
    z-index: 1;
  }

  .slide.slide-1 {
    z-index: 2;
  }

  /* Ken Burns effect on images */
  .slide img {
    transform: scale(1.02);
    transition: transform 6s ease-out;
  }

  .slide.opacity-100 img {
    transform: scale(1.08);
  }

  .slide-indicator.active {
    background-color: white !important;
    transform: scale(1.3);
  }

  .service-icon {
    opacity: 0;
    transform: scale(0.8) translateY(10px);
  }

  /* Responsive text adjustments */
  @media (max-width: 768px) {
    .slide h3 {
      font-size: 1.75rem !important;
    }

    .slide p {
      font-size: 1rem !important;
    }

    .slide > div > div {
      padding: 1rem !important;
    }
  }

  /* Floating animation */
  .floating-element {
    animation: float 6s ease-in-out infinite;
  }

  @keyframes float {
    0%, 100% { transform: translateY(0px); }
    50% { transform: translateY(-20px); }
  }

  /* Scroll line animation */
  @keyframes animate-scroll-line {
    0% { transform: translateY(-100%); }
    100% { transform: translateY(400%); }
  }

  .animate-scroll-line {
    animation: animate-scroll-line 2s ease-in-out infinite;
  }

  /* Bridge Background */
  .bridge-bg-container {
    opacity: 1;
  }

  .bridge-bg-svg {
    opacity: 1;
    filter: grayscale(20%) brightness(1.1);
    transform: scale(1.05);
  }

  /* 既存仕様に合わせる（per-character fade-in） */
  .a--op {
    opacity: 0;
    transition: opacity .75s cubic-bezier(.4, .1, .2, 1);
  }
  .is-v .a--op {
    opacity: 1;
  }

  /* Ensure hero text waits for font load */
  .hero-text { visibility: hidden; }
  body.fonts-loaded .hero-text { visibility: visible; }

  /* Scroll indicator styles */
  .scroll-indicator .w-0\.5 {
    width: 2px !important;
    min-width: 2px !important;
  }

  /* Scroll indicator mobile fixes */
  @media (max-width: 768px) {
    .scroll-indicator {
      bottom: 20px !important;
      left: 50% !important;
      transform: translateX(-50%) !important;
      z-index: 20 !important;
    }
    
    .scroll-indicator .flex {
      flex-direction: column;
      align-items: center;
      gap: 8px;
    }
    
    .scroll-indicator span {
      font-size: 10px !important;
      letter-spacing: 0.1em;
    }
    
    .scroll-indicator .w-0\.5.h-12 {
      height: 24px !important;
      width: 2px !important;
    }
    
    .scroll-indicator .w-0\.5.h-4 {
      height: 8px !important;
      width: 2px !important;
    }
    
    .scroll-indicator svg {
      width: 12px !important;
      height: 12px !important;
    }
  }

</style>

<!-- ========================= JavaScript ========================= -->
<script>
  // Handle slide-in-right animation for heading
  const missionSection = document.querySelector('.mission-section');
  if (missionSection) {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          missionSection.classList.add('open');
        } else {
          missionSection.classList.remove('open');
        }
      });
    }, { 
      threshold: 0.2,
      rootMargin: '-50px 0px'
    });
    observer.observe(missionSection);
  }
  document.addEventListener('DOMContentLoaded', () => {
    // Hero section slideshow functionality
    let currentSlide = 1;
    const totalSlides = 4;
    const slides = document.querySelectorAll('.slide');
    const indicators = document.querySelectorAll('.slide-indicator');

    function showSlide(slideNumber: number) {
      slides.forEach((slide, index) => {
        if (index + 1 === slideNumber) {
          slide.classList.add('opacity-100');
          slide.classList.remove('opacity-0');
        } else {
          slide.classList.remove('opacity-100');
          slide.classList.add('opacity-0');
        }
      });

      indicators.forEach((indicator, index) => {
        if (index + 1 === slideNumber) {
          indicator.classList.add('active');
        } else {
          indicator.classList.remove('active');
        }
      });
    }

    // Defer hero text/image/scroll indicator reveal until fonts are loaded or timeout
    const revealHero = () => {
      const heroText = document.querySelector('.hero-text');
      const heroImage = document.querySelector('.hero-image');
      const scrollIndicator = document.querySelector('.scroll-indicator');
      if (heroText) {
        setTimeout(() => {
          (heroText as HTMLElement).style.opacity = '1';
          (heroText as HTMLElement).style.transform = 'translateY(0)';
        }, 300);
      }
      if (heroImage) {
        setTimeout(() => {
          (heroImage as HTMLElement).style.opacity = '1';
          (heroImage as HTMLElement).style.transform = 'translateY(0)';
        }, 600);
      }
      if (scrollIndicator) {
        setTimeout(() => {
          (scrollIndicator as HTMLElement).style.opacity = '1';
        }, 1000);
      }
    };

    if (document.body.classList.contains('fonts-loaded')) {
      revealHero();
    } else {
      const mo = new MutationObserver((_muts, obs) => {
        if (document.body.classList.contains('fonts-loaded')) {
          obs.disconnect();
          revealHero();
        }
      });
      mo.observe(document.body, { attributes: true, attributeFilter: ['class'] });
    }

    // Auto-advance slides
    setInterval(() => {
      currentSlide = currentSlide === totalSlides ? 1 : currentSlide + 1;
      showSlide(currentSlide);
    }, 5000);

    // Manual slide control
    indicators.forEach((indicator, index) => {
      indicator.addEventListener('click', () => {
        currentSlide = index + 1;
        showSlide(currentSlide);
      });
    });

    // Hero text animation
    const heroText = document.querySelector('.hero-text');
    const heroImage = document.querySelector('.hero-image');
    const scrollIndicator = document.querySelector('.scroll-indicator');

    if (heroText) {
      setTimeout(() => {
        (heroText as HTMLElement).style.opacity = '1';
        (heroText as HTMLElement).style.transform = 'translateY(0)';
      }, 300);
    }

    if (heroImage) {
      setTimeout(() => {
        (heroImage as HTMLElement).style.opacity = '1';
        (heroImage as HTMLElement).style.transform = 'translateY(0)';
      }, 600);
    }

    if (scrollIndicator) {
      setTimeout(() => {
        (scrollIndicator as HTMLElement).style.opacity = '1';
      }, 1000);
    }

    // Service icons animation
    const serviceIcons = document.querySelectorAll('.service-icon');
    serviceIcons.forEach((icon, _index) => {
      const delay = parseFloat((icon as HTMLElement).getAttribute('data-delay') || '0') * 1000;
      setTimeout(() => {
        (icon as HTMLElement).style.opacity = '1';
        (icon as HTMLElement).style.transform = 'scale(1) translateY(0)';
      }, 1500 + delay);
    });

    // Per-character fade-in for elements marked with .fade-chars
    const prepareFadeChars = (el: HTMLElement) => {
      const text = el.textContent || '';
      el.textContent = '';
      const frag = document.createDocumentFragment();
      Array.from(text).forEach((ch) => {
        const span = document.createElement('span');
        span.textContent = ch;
        span.className = 'fade-char';
        frag.appendChild(span);
      });
      el.appendChild(frag);
    };

    const fadeCharTargets = Array.from(document.querySelectorAll('.fade-chars')) as HTMLElement[];
    fadeCharTargets.forEach(prepareFadeChars);

    const fadeCharsObserver = new IntersectionObserver((entries, obs) => {
      entries.forEach((entry) => {
        if (!entry.isIntersecting) return;
        const el = entry.target as HTMLElement;
        const chars = Array.from(el.querySelectorAll('.fade-char')) as HTMLElement[];
        chars.forEach((c, i) => {
          c.style.transitionDelay = `${i * 60}ms`;
          c.classList.add('in');
        });
        obs.unobserve(el);
      });
    }, { threshold: 0.1 });

    fadeCharTargets.forEach((el) => fadeCharsObserver.observe(el));

    // SVGアニメーション即座発火版 - ラグ解消
    const initializeSvgAnimationImmediate = () => {
      const tspans = document.querySelectorAll('.textcont tspan');
      
      if (tspans.length === 0) return;
      
      // strokeLength設定とアニメーション準備を同時実行
      tspans.forEach((t, i) => {
        const element = t as HTMLElement;
        
        // 初期状態設定
        element.style.fill = 'transparent';
        element.style.stroke = 'var(--ink)';
        element.style.strokeWidth = window.innerWidth <= 768 ? '1.2px' : '1.5px';
        
        // strokeLength計算（最適化）
        let len = 900; // デフォルト値
        try {
          if (typeof (t as any).getComputedTextLength === 'function') {
            len = Math.max(60, Math.ceil((t as any).getComputedTextLength()));
          }
        } catch (e) {
          // エラー時はデフォルト値を使用
        }
        
        // CSS変数設定
        element.style.setProperty('--len', `${len}`);
        element.style.setProperty('--i', `${i}`);
        
        // dasharray設定
        element.style.strokeDasharray = `${len}`;
        element.style.strokeDashoffset = `${len}`;
      });
      
      console.log('SVG Animation initialized immediately');
    };
    
    // プリローダー対応の即座発火
    const handlePreloaderAndStart = () => {
      const preloader = document.getElementById('preloader');
      const pageRoot = document.getElementById('page-root');
      
      // SVGを即座に初期化
      initializeSvgAnimationImmediate();
      
      if (!preloader || !pageRoot) {
        return; // プリローダーがない場合は初期化のみで終了
      }
      
      // プリローダー完了の監視（ラグなし）
      const checkPreloaderStatus = () => {
        const preloaderStyle = getComputedStyle(preloader);
        const pageRootStyle = getComputedStyle(pageRoot);
        
        if (preloaderStyle.display === 'none' || parseFloat(pageRootStyle.opacity) > 0.1) {
          // プリローダー完了を検知したら即座にアニメーション開始
          startSvgAnimation();
          return true;
        }
        return false;
      };
      
      // 高頻度チェック（ラグ最小化）
      const intervalCheck = setInterval(() => {
        if (checkPreloaderStatus()) {
          clearInterval(intervalCheck);
        }
      }, 50); // 50ms間隔でチェック
      
      // MutationObserverも並行使用
      const observer = new MutationObserver(() => {
        if (checkPreloaderStatus()) {
          clearInterval(intervalCheck);
          observer.disconnect();
        }
      });
      
      observer.observe(preloader, { attributes: true, attributeFilter: ['style'] });
      observer.observe(pageRoot, { attributes: true, attributeFilter: ['style'] });
      
      // 最大3秒でフォールバック
      setTimeout(() => {
        clearInterval(intervalCheck);
        observer.disconnect();
        startSvgAnimation();
      }, 3000);
    };
    
    // アニメーション開始（ラグなし）
    const startSvgAnimation = () => {
      const tspans = document.querySelectorAll('.textcont tspan');
      
      // アニメーションが既に動いているかチェック
      const isAnimating = Array.from(tspans).some(t => {
        const style = getComputedStyle(t as Element);
        return style.animationName !== 'none' && style.animationPlayState === 'running';
      });
      
      if (isAnimating) {
        return; // 既にアニメーション中なら何もしない
      }
      
      tspans.forEach((t) => {
        const element = t as HTMLElement;
        
        // アニメーションリセット（一瞬）
        element.style.animation = 'none';
        element.offsetHeight; // 強制リフロー
        
        // アニメーション再開（即座）
        element.style.animation = '';
      });
      
      console.log('SVG Animation started immediately');
    };
    
    // Intersection Observer（最適化済み）
    const setupIntersectionObserver = () => {
      const heroElements = document.querySelectorAll('.hero-svg-headline, section[class*="hero"]');
      
      if (heroElements.length === 0) return;
      
      const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            // 遅延なしで即座にアニメーション開始
            startSvgAnimation();
            observer.unobserve(entry.target);
          }
        });
      }, {
        threshold: 0.1, // 閾値を下げて早期発火
        rootMargin: '20px 0px -20px 0px' // マージンを調整
      });
      
      heroElements.forEach(el => observer.observe(el));
    };
    
    // モバイル最適化
    if (window.innerWidth <= 768) {
      // モバイル用CSS調整（即座適用）
      const style = document.createElement('style');
      style.textContent = `
        @media (max-width: 768px) {
          :root {
            --draw: 1.2s !important;
            --step: 0.15s !important;
          }
          .textcont tspan {
            stroke-width: 1.2px !important;
          }
        }
      `;
      document.head.appendChild(style);
      
      console.log('Mobile optimizations applied');
    }
    
    // 実行開始
    handlePreloaderAndStart();
    setupIntersectionObserver();
    
    // 即座フォールバック（1秒後）
    setTimeout(() => {
      startSvgAnimation();
    }, 1000);
    
    // window.load での最終チェック（ラグなし）
    window.addEventListener('load', () => {
      setTimeout(() => {
        const tspans = document.querySelectorAll('.textcont tspan');
        const hasActiveAnimation = Array.from(tspans).some(t => {
          const style = getComputedStyle(t as Element);
          return style.animationName !== 'none';
        });
        
        if (!hasActiveAnimation) {
          console.log('Final fallback: restarting SVG animation');
          
          tspans.forEach((t) => {
            const element = t as HTMLElement;
            element.style.animation = 'none';
            element.offsetHeight;
            element.style.animation = '';
          });
        }
      }, 100); // 100msの最小遅延のみ
    });
    // Preload gate: wait for critical images (data-preload) before reveal
    const preloader = document.getElementById('preloader');
    const pageRoot = document.getElementById('page-root');
    const preloadEls = Array.from(document.querySelectorAll('img[data-preload], picture[data-preload] img')) as HTMLImageElement[];

    const waitForImage = (img: HTMLImageElement) => new Promise<void>((resolve) => {
      if (img.complete && img.naturalWidth > 0) return resolve();
      const onLoad = () => { cleanup(); resolve(); };
      const onError = () => { cleanup(); resolve(); };
      const cleanup = () => {
        img.removeEventListener('load', onLoad);
        img.removeEventListener('error', onError);
      };
      img.addEventListener('load', onLoad, { once: true });
      img.addEventListener('error', onError, { once: true });
    });

    const reveal = () => {
      if (preloader) preloader.style.display = 'none';
      if (pageRoot) pageRoot.classList.remove('opacity-0');
    };

    const timeoutMs = 4000; // safety timeout
    const timeout = new Promise<void>((resolve) => setTimeout(resolve, timeoutMs));
    Promise.race([
      Promise.all(preloadEls.map(waitForImage)),
      timeout,
    ]).then(reveal);

    // アンカーリンクの処理はLayout.astroで統一管理
  });

  document.addEventListener('DOMContentLoaded', () => {
  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        entry.target.classList.add('visible');
        observer.unobserve(entry.target);
      }
    });
  }, {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
  });

  document.querySelectorAll('.fade-in-text').forEach((el) => {
    observer.observe(el);
  });

  // Handle slide-in-left animation
  const slideInLeftObserver = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        entry.target.classList.add('visible');
      } else {
        entry.target.classList.remove('visible');
      }
    });
  }, {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
  });

  document.querySelectorAll('.slide-in-left').forEach((el) => {
    slideInLeftObserver.observe(el);
  });

  // Handle service border line animation
  const serviceBorderObserver = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        entry.target.classList.add('visible');
      } else {
        entry.target.classList.remove('visible');
      }
    });
  }, {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
  });

  document.querySelectorAll('.service-border-line').forEach((el) => {
    serviceBorderObserver.observe(el);
  });

  // Company section background image switching
  const companySection = document.querySelector('section.min-h-screen.bg-gray-50');
  const companyImages = companySection ? JSON.parse(companySection.getAttribute('data-images') || '[]') : [];

  const backgroundImage = document.getElementById('background-image') as HTMLImageElement;
  const menuItems = document.querySelectorAll('.menu-item');

  // 各メニューアイテムにhoverイベントを追加
  menuItems.forEach((item) => {
    const imageIndexAttr = item.getAttribute('data-image');
    if (!imageIndexAttr) return;
    
    const imageIndex = parseInt(imageIndexAttr);
    
    item.addEventListener('mouseenter', () => {
      if (backgroundImage && companyImages[imageIndex]) {
        backgroundImage.style.opacity = '0';
        
        setTimeout(() => {
          backgroundImage.src = companyImages[imageIndex];
          backgroundImage.style.opacity = '1';
        }, 350);
      }
    });
  });

  // デフォルト画像に戻す（最初の画像に戻す）
  if (companySection) {
    companySection.addEventListener('mouseleave', () => {
      if (backgroundImage) {
        backgroundImage.style.opacity = '0';
        setTimeout(() => {
          backgroundImage.src = companyImages[0]; // デフォルトは最初の画像
          backgroundImage.style.opacity = '1';
        }, 350);
      }
    });
  }

  // onscreen演出: 画面に入ったら .onscreen を付与
  const onscreenRoots = document.querySelectorAll('.onscreen-root');
  onscreenRoots.forEach((root) => {
    const io = new IntersectionObserver(([ent]) => {
      if (ent.isIntersecting) {
        root.classList.add('onscreen');
        io.disconnect();
      }
    }, { threshold: 0.2 });
    io.observe(root);
  });

  // Promise section per-character fade-in
  document.addEventListener('DOMContentLoaded', () => {
    const lines = Array.from(document.querySelectorAll('._line.typesquare_option')) as HTMLElement[];

    const io = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          (entry.target as HTMLElement).classList.add('is-v');
          io.unobserve(entry.target); // 一度だけ
        }
      });
    }, {
      root: null,
      threshold: 0.1,
      rootMargin: '0px 0px -10% 0px'
    });

    lines.forEach(line => io.observe(line));

    // セットアップ直後に可視状態なら即時反映（安全策）
    requestAnimationFrame(() => {
      lines.forEach(line => {
        const rect = line.getBoundingClientRect();
        const vh = window.innerHeight || document.documentElement.clientHeight;
        const visiblePx = Math.min(vh, Math.max(0, vh - Math.max(0, rect.top))) - Math.max(0, rect.bottom - vh);
        const visibleRatio = Math.max(0, Math.min(1, visiblePx / Math.max(1, rect.height)));
        if (visibleRatio >= 0.1) {
          line.classList.add('is-v');
          io.unobserve(line);
        }
      });
    });
  });
});

  // Hero text/image animations gated by fonts-ready
  const startFontsLoaded = () => {
    document.body.classList.add('fonts-loaded');
  };
  if (document && 'fonts' in document && (document as any).fonts?.ready) {
    (document as any).fonts.ready.then(startFontsLoaded);
  }
  setTimeout(startFontsLoaded, 3000);

  document.addEventListener('DOMContentLoaded', () => {
    // Hero section slideshow functionality
    let currentSlide = 1;
    const totalSlides = 4;
    const slides = document.querySelectorAll('.slide');
    const indicators = document.querySelectorAll('.slide-indicator');

    function showSlide(slideNumber: number) {
      slides.forEach((slide, index) => {
        if (index + 1 === slideNumber) {
          slide.classList.add('opacity-100');
          slide.classList.remove('opacity-0');
        } else {
          slide.classList.remove('opacity-100');
          slide.classList.add('opacity-0');
        }
      });

      indicators.forEach((indicator, index) => {
        if (index + 1 === slideNumber) {
          indicator.classList.add('active');
        } else {
          indicator.classList.remove('active');
        }
      });
    }

    // Defer hero text/image/scroll indicator reveal until fonts are loaded or timeout
    const revealHero = () => {
      const heroText = document.querySelector('.hero-text');
      const heroImage = document.querySelector('.hero-image');
      const scrollIndicator = document.querySelector('.scroll-indicator');
      if (heroText) {
        setTimeout(() => {
          (heroText as HTMLElement).style.opacity = '1';
          (heroText as HTMLElement).style.transform = 'translateY(0)';
        }, 300);
      }
      if (heroImage) {
        setTimeout(() => {
          (heroImage as HTMLElement).style.opacity = '1';
          (heroImage as HTMLElement).style.transform = 'translateY(0)';
        }, 600);
      }
      if (scrollIndicator) {
        setTimeout(() => {
          (scrollIndicator as HTMLElement).style.opacity = '1';
        }, 1000);
      }
    };

    if (document.body.classList.contains('fonts-loaded')) {
      revealHero();
    } else {
      const mo = new MutationObserver((_muts, obs) => {
        if (document.body.classList.contains('fonts-loaded')) {
          obs.disconnect();
          revealHero();
        }
      });
      mo.observe(document.body, { attributes: true, attributeFilter: ['class'] });
    }

    // Auto-advance slides
    setInterval(() => {
      currentSlide = currentSlide === totalSlides ? 1 : currentSlide + 1;
      showSlide(currentSlide);
    }, 5000);

    // Manual slide control
    indicators.forEach((indicator, index) => {
      indicator.addEventListener('click', () => {
        currentSlide = index + 1;
        showSlide(currentSlide);
      });
    });

    // Scroll indicator visibility control
    const scrollIndicator = document.getElementById('scroll-indicator');
    if (scrollIndicator) {
      // Show scroll indicator after hero animation completes
      setTimeout(() => {
        scrollIndicator.style.opacity = '1';
        scrollIndicator.style.transition = 'opacity 0.5s ease-in-out';
      }, 3000);

      // Hide scroll indicator when user starts scrolling
      let hasScrolled = false;
      const handleScroll = () => {
        if (!hasScrolled && window.scrollY > 50) {
          hasScrolled = true;
          scrollIndicator.style.opacity = '0';
          scrollIndicator.style.transition = 'opacity 0.3s ease-in-out';
        }
      };
      window.addEventListener('scroll', handleScroll, { passive: true });
    }
  });
</script>

<style>
  .slider-container {
    width: 100%;
    overflow: hidden;
    background: #ffffff;
    padding: 2rem 0;
  }

  .slider-track {
    display: flex;
    gap: 3rem;
    animation: scroll 15s linear infinite;
  }

  .logo-slide {
    position: static; /* reset any global .slide absolute positioning */
    flex-shrink: 0;
    width: 200px;
    height: 100px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .logo-slide img {
    max-width: 100%;
    max-height: 100%;
    object-fit: contain;
    opacity: 0.9;
  }


  @keyframes scroll {
    0% {
      transform: translateX(0);
    }
    100% {
      transform: translateX(-50%);
    }
  }

</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add('visible');
        } else {
          entry.target.classList.remove('visible');
        }
      });
    }, {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    });

    // Handle grid border and divide animations
    document.querySelectorAll('.grid.border-t.border-primary.border-b.divide-y.divide-primary').forEach((el) => {
      observer.observe(el);
    });
  });
</script>