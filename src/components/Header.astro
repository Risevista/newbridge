---
import Image from './Image.astro';
import HeaderLogo from '../assets/img/bridge-logo.png';
const { title } = Astro.props;

// ナビゲーション項目の定義
interface NavItem {
  href: string;
  text: string;
  submenu?: Array<{ href: string; text: string }>;
}

const navItems: NavItem[] = [
  { 
    href: '/', 
    text: 'ホーム',
  },
  { 
    href: '/#company', 
    text: '会社概要',
  },  
  { 
    href: '/providers', 
    text: 'ご契約者さま',
  },
  { 
    href: '/members', 
    text: '社員紹介',
  },
  { 
    href: '/solicitation', 
    text: '勧誘方針',
  },
  { 
    href: '/privacy', 
    text: 'プライバシーポリシー',
  },
  { 
    href: '/contact', 
    text: 'お問い合わせ',
  }
];
---

  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title}</title>
    <slot name="head" />
  </head> 
  <body class="font-adobe">
    <!-- ヘッダー -->
    <nav id="header-nav" class="header-navigation fixed top-0 left-0 z-[9999] w-full px-8 md:py-10 flex items-center justify-between transition-all duration-300 h-10 md:h-10">
      <!-- 左側：テキスト＋ロゴ -->
      <div class="flex items-center gap-2">
        <a href="/" class="flex items-center gap-2">
          <Image src={HeaderLogo} alt="Bridge" class="h-8 w-auto md:h-16" />
        </a>
      </div>
      
      <!-- 右側：ナビ -->
      <div class="flex items-center gap-6 font-serif text-secondary">
        <ul id="nav-menu" class="hidden md:flex gap-6 md:px-4 text-sm font-medium">
          {navItems.map(item => (
            <li class="relative group">
              <a href={item.href} class="nav-link">
                {item.text}
              </a>
              <!-- ドロップダウンメニュー -->
              {item.submenu && (
                <div class="absolute top-full left-1/2 transform -translate-x-1/2 mt-2 w-48 bg-white rounded-lg opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-50">
                  <div class="py-2">
                    {item.submenu?.map((subItem, index) => (
                      <>
                        <a href={subItem.href} class="block px-4 py-3 text-primary hover:bg-gray-50 text-[14px] transition-colors text-center">
                          {subItem.text}
                        </a>
                        {index < (item.submenu?.length || 0) - 1 && (
                          <div class="border-t border-gray-200 mx-2"></div>
                        )}
                      </>
                    ))}
                  </div>
                </div>
              )}
            </li>
          ))}
        </ul>
        

        <!-- モバイル用 -->
        <div class="md:hidden flex items-center gap-2 justify-end w-full">
          <button id="menu-toggle" class="text-[#0C223F] focus:outline-none hover:text-gray-600 transition-colors">
            <svg id="hamburger-icon" class="w-6 h-6" fill="none" stroke="currentColor" stroke-width="2"
              viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path stroke-linecap="round" stroke-linejoin="round" d="M4 6h16M4 12h16M4 18h16" />
            </svg>
            <svg id="close-icon" class="w-6 h-6 hidden" fill="none" stroke="currentColor" stroke-width="2"
              viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
      </div>
    </nav>

    <!-- モバイルメニュー -->
    <div id="mobile-menu" class="md:hidden hidden bg-primary-back bg-opacity-95 fixed top-[80px] left-0 w-full z-[10000] transform transition-transform duration-300 ease-in-out -translate-y-full">
      <ul class="flex flex-col text-[#0C223F] text-sm font-light max-h-[70vh] overflow-y-auto">
        {navItems.map((item, itemIndex) => (
          <li>
            <div class="flex items-center justify-between px-6 py-4">
              <a href={item.href} class="nav-link flex-1 text-[#0C223F] hover:text-gray-300">
                {item.text}
              </a>
              {item.submenu && (
                <button 
                  class="submenu-toggle ml-2 p-1 text-[#0C223F] hover:text-gray-300 transition-transform duration-200"
                  data-target={`submenu-${itemIndex}`}
                >
                  <svg class="w-4 h-4 transform transition-transform duration-200" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M9 5l7 7-7 7"></path>
                  </svg>
                </button>
              )}
            </div>
            {item.submenu && (
              <ul id={`submenu-${itemIndex}`} class="submenu hidden bg-primary-back">
                {item.submenu.map((subItem) => (
                  <li>
                    <a 
                      href={subItem.href} 
                      class="block px-8 py-3 text-primary hover:text-primary hover:bg-gray-200 text-sm transition-colors"
                    >
                      {subItem.text}
                    </a>
                  </li>
                ))}
              </ul>
            )}
          </li>
        ))}
        
      </ul>
    </div>

    <!-- モバイルメニュー用スクリプト -->
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const toggle = document.getElementById('menu-toggle');
        const menu = document.getElementById('mobile-menu');
        const hamburgerIcon = document.getElementById('hamburger-icon');
        const closeIcon = document.getElementById('close-icon');
        const header = document.getElementById('header-nav');
    
        if (toggle && menu && hamburgerIcon && closeIcon && header) {
          toggle.addEventListener('click', () => {
            const isHidden = menu.classList.contains('hidden');
            if (isHidden) {
              menu.classList.remove('hidden');
              setTimeout(() => {
                menu.classList.remove('-translate-y-full');
                header.style.backgroundColor = 'rgba(255,255,255,0.95)';
              }, 10);
              hamburgerIcon.classList.add('hidden');
              closeIcon.classList.remove('hidden');
            } else {
              menu.classList.add('-translate-y-full');
              setTimeout(() => {
                menu.classList.add('hidden');
                header.style.backgroundColor = 'transparent';
                document.querySelectorAll('.submenu').forEach(submenu => {
                  submenu.classList.add('hidden');
                });
                document.querySelectorAll('.submenu-toggle svg').forEach(arrow => {
                  if (arrow) arrow.classList.remove('rotate-90');
                });
              }, 300);
              hamburgerIcon.classList.remove('hidden');
              closeIcon.classList.add('hidden');
            }
          });
        }
    
        document.querySelectorAll('.submenu-toggle').forEach(button => {
          button.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
    
            const targetId = button.getAttribute('data-target');
            if (!targetId) return;
    
            const submenu = document.getElementById(targetId);
            const arrow = button.querySelector('svg');
    
            if (submenu) {
              if (submenu.classList.contains('hidden')) {
                submenu.classList.remove('hidden');
                if (arrow) arrow.classList.add('rotate-90');
              } else {
                submenu.classList.add('hidden');
                if (arrow) arrow.classList.remove('rotate-90');
              }
            }
          });
        });
      });
    </script>
    
    <style>
      :root {
        --header-height: 80px;
      }

      .header-navigation {
        height: var(--header-height);
        background: transparent;
      }

      /* モバイルメニューの表示を確実にする */
      #mobile-menu {
        backdrop-filter: blur(10px);
        -webkit-backdrop-filter: blur(10px);
      }

      /* ハンバーガーメニューボタンのスタイル */
      #menu-toggle {
        position: relative;
        z-index: 10001;
      }

      .nav-link {
        position: relative;
        display: inline-block;
        text-decoration: none;
        transition: color 0.3s ease;
        font-weight: var(--fontWeightBold);
        font-size: 16px;
        line-height: 1.6;
        font-family: var(--fontFamily);
        letter-spacing: 0.2px;
      }
      .nav-link::after {
        content: "";
        position: absolute;
        left: 0;
        bottom: 0;
        height: 2px;
        width: 0;
        background-color: #0076c1;
        transition: width 0.3s ease;
      }
      .nav-link:hover {
        color: #0076c1;
      }
      .nav-link:hover::after {
        width: 100%;
      }

      /* スマホではアンダーラインを非表示 */
      @media (max-width: 767px) {
        .nav-link::after {
          display: none;
        }
        .nav-link:hover::after {
          display: none;
        }
      }

      /* ドロップダウンメニューのスタイル */
      .group:hover .group-hover\:opacity-100 {
        opacity: 1;
      }
      .group:hover .group-hover\:visible {
        visibility: visible;
      }

      /* モバイルメニューのスタイル */
      .submenu {
        max-height: 0;
        overflow: hidden;
        transition: max-height 0.3s ease-in-out;
      }
      
      .submenu:not(.hidden) {
        max-height: 300px;
      }

      /* モバイルメニューのborderを中央に配置 */
      #mobile-menu li {
        position: relative;
      }
      
      #mobile-menu li::after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 50%;
        transform: translateX(-50%);
        width: calc(100% - 48px); /* px-6の左右24pxずつを引く */
        height: 1px;
        background-color: #d1d5db; /* border-gray-300 */
      }
      
      #mobile-menu li:last-child::after {
        display: none;
      }

      /* サブメニューのborderも中央に配置 */
      .submenu li {
        position: relative;
      }
      
      .submenu li::after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 50%;
        transform: translateX(-50%);
        width: calc(100% - 64px); /* px-8の左右32pxずつを引く */
        height: 1px;
        background-color: #d1d5db; /* border-gray-300 */
      }
      
      .submenu li:last-child::after {
        display: none;
      }

      /* 矢印の回転アニメーション */
      .submenu-toggle svg {
        transition: transform 0.2s ease-in-out;
      }
      
      .rotate-90 {
        transform: rotate(90deg);
      }

      /* スクロールバーのスタイル */
      .overflow-y-auto::-webkit-scrollbar {
        width: 4px;
      }
      
      .overflow-y-auto::-webkit-scrollbar-track {
        background: rgba(255, 255, 255, 0.1);
      }
      
      .overflow-y-auto::-webkit-scrollbar-thumb {
        background: rgba(255, 255, 255, 0.3);
        border-radius: 2px;
      }
    </style>
  </body>
